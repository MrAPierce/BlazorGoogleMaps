@page "/mapMarker"
@using GoogleMapsComponents
@using GoogleMapsComponents.Maps

<h1>Google Map Markers</h1>

<GoogleMap @ref="@_map1" Id="map1" Options="@_mapOptions"></GoogleMap>
<button @onclick="AddMarker">Add marker</button>
<button @onclick="RemoveMarker">Remove marker</button>
<button @onclick="Recenter">Re-center marker</button>
@if(_markers.Any())
{
<br/><text>Label: </text><input type="text" value="@_labelText" @onchange="UpdateLabelText" />
<br />
}
<button @onclick="ToggleLabelFontWeight">Toggle label font-weight</button>
<button @onclick="InvokeClustering">Invoke map cluster</button>
<button @onclick="@ClearClustering">Clear cluster</button>

<MapEventList @ref="@_eventList" Events="@_events"></MapEventList>

@functions {
    private GoogleMap _map1 = default!;

    private MapOptions _mapOptions = default!;

    private readonly Stack<Marker> _markers = new Stack<Marker>();

    private readonly List<String> _events = new List<String>();

    private MapEventList _eventList = default!;

    private string? _labelText = "";

    private MarkerClustering _markerClustering = default!;

    protected override void OnInitialized()
    {
        _mapOptions = new MapOptions()
        {
            Zoom = 13,
            Center = new LatLngLiteral(13.505892, 100.8162),
            MapTypeId = MapTypeId.Roadmap
        };
    }

    private async Task AddMarker()
    {
        var marker = await Marker.CreateAsync(_map1.JsRuntime, _markers.Count() % 2 == 0 ?
            new MarkerOptions()
            {
                Position = await _map1.InteropObject.GetCenter(),
                Map = _map1.InteropObject,
                Label = new MarkerLabel { Text = $"Test {_markers.Count()}", FontWeight = "bold" },
                Draggable=true,
                Icon = new Icon()
                {
                    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            } :
            new MarkerOptions()
            {
                Position = await _map1.InteropObject.GetCenter(),
                Map = _map1.InteropObject,
                Label = $"Test {_markers.Count()}",
                Draggable=true,
                Icon = new Icon()
                {
                    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                }
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            });


        var icon = await marker.GetIcon();

        Console.WriteLine($"Get icon result type is : {icon.Value.GetType()}");

        icon.Switch(
            s => Console.WriteLine(s),
            i => Console.WriteLine(i.Url),
            _ => { });

        _markers.Push(marker);
        _labelText = await marker.GetLabelText();

        await marker.AddListener<MouseEvent>("click", async e =>
        {
            await e.Stop();
            var markerLabelText = await marker.GetLabelText();
            _events.Add("click on " + markerLabelText);
            StateHasChanged();

            
        });
    }

    private async Task RemoveMarker()
    {
        if (!_markers.Any())
        {
            return;
        }

        var lastMarker = _markers.Pop();
        await lastMarker.SetMap(null);
        _labelText = _markers.Any() ? await _markers.Peek().GetLabelText() : "";
    }

    private async Task Recenter()
    {
        if (!_markers.Any())
        {
            return;
        }

        var lastMarker = _markers.Peek();
        var center = await _map1.InteropObject.GetCenter();
        await lastMarker.SetPosition(center);
    }

    private async Task UpdateLabelText(ChangeEventArgs e)
    {
        if (!_markers.Any())
        {
            return;
        }

        string newLabelText = e.Value?.ToString() ?? "";
        if (_labelText != newLabelText)
        {
            _labelText = newLabelText;

            var lastMarker = _markers.Peek();
            await lastMarker.SetLabelText(_labelText);
        }
    }

    private async Task ToggleLabelFontWeight()
    {
        if (!_markers.Any())
        {
            return;
        }

        var lastMarker = _markers.Peek();
        var lastMarkerLabel = await lastMarker.GetLabelMarkerLabel();
        lastMarkerLabel.FontWeight = (lastMarkerLabel.FontWeight == "bold") ? "normal" : "bold";
        await lastMarker.SetLabel(lastMarkerLabel);
    }

    private async Task ClearClustering()
    {
        await _markerClustering.ClearMarkers();
    }

    private async Task InvokeClustering()
    {
        var coordinates = new List<LatLngLiteral>()
            {
                new(-31.56391, 147.154312),
                new(-33.718234, 150.363181),
                new(-33.727111, 150.371124),
                new(-33.848588, 151.209834),
                new(-33.851702, 151.216968),
                new(-34.671264, 150.863657),
                new(-35.304724, 148.662905),
                new(-36.817685, 175.699196),
                new(-36.828611, 175.790222),
                new(-37.75, 145.116667),
                new(-37.759859, 145.128708),
                new(-37.765015, 145.133858),
                new(-37.770104, 145.143299),
                new(-37.7737, 145.145187),
                new(-37.774785, 145.137978),
                new(-37.819616, 144.968119),
                new(-38.330766, 144.695692),
                new(-39.927193, 175.053218),
                new(-41.330162, 174.865694),
                new(-42.734358, 147.439506),
                new(-42.734358, 147.501315),
                new(-42.735258, 147.438),
                new(-43.999792, 170.463352),
            };

        var markers = await GetMarkers(coordinates, _map1.InteropObject);

        // If adding a clustering event listener, initialize markerclustering with an empty marker list 
        // Clustering happens immediately upon adding markers, so including markers with the init 
        // creates a race condition with JSInterop adding a listener. If not adding a listener, pass markers
        // to CreateAsync to eliminate the latency of a second JSInterop call to AddMarkers.
        _markerClustering = await MarkerClustering.CreateAsync(_map1.JsRuntime, _map1.InteropObject, markers);
        


        LatLngBoundsLiteral? boundsLiteral = new LatLngBoundsLiteral(coordinates.First());
        foreach (var literal in coordinates)
        {
            LatLngBoundsLiteral.CreateOrExtend(ref boundsLiteral, literal);
        }

        await _map1.InteropObject.FitBounds(boundsLiteral, OneOf.OneOf<int, GoogleMapsComponents.Maps.Coordinates.Padding>.FromT0(1));
    }

    private async Task<IEnumerable<Marker>> GetMarkers(IEnumerable<LatLngLiteral> coords, Map map)
    {
        var result = new List<Marker>(coords.Count());
        foreach (var latLngLiteral in coords)
        {
            var marker = await Marker.CreateAsync(_map1.JsRuntime, new MarkerOptions()
            {
                Position = latLngLiteral,
                Map = map,
                Label = $"Test {result.Count()+1}",
                //Icon = new Icon()
                //{
                //    Url = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
                //}
                //Icon = "https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png"
            });
            result.Add(marker);
        }
        return result;
    }

}